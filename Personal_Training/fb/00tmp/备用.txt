#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define per(i, a, b) for(int i=(b)-1; i>=(a); i--)
#define sz(a) (int)a.size()
#define de(a) cout << #a << " = " << a << endl
#define dd(a) cout << #a << " = " << a << " "
#define all(a) (a).begin(), (a).end()
#define pw(x) (1ll<<(x))
#define lb(x) ((x) & -(x))
#define endl "\n"
#define FI(x) freopen(#x".in","r",stdin)
#define FO(x) freopen(#x".out","w",stdout)
typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
//typedef uniform_int_distribution<ll> RR;
const int P = 1e9 + 7;
//ll rnd(ll l, ll r) { mt19937 gen(rand()); RR dis(l, r); return dis(gen); }
int add(int a, int b) {if((a += b) >= P) a -= P; return a < 0 ? a + P : a;}
int mul(int a, int b) {return 1ll * a * b % P;}
int kpow(int a, int b) {int r=1;for(;b;b>>=1,a=mul(a,a)) {if(b&1)r=mul(r,a);}return r;}
//----
ll cc = 0;
namespace prime {
	using uint128 = __uint128_t;
	using ull = unsigned long long;
	using ll = long long;
	using uint = unsigned int;
	using pii = pair<ull, uint>;

	inline ull sqr(ull x) { return x * x; }
	inline uint isqrt(ull x) { return sqrtl(x); }
	inline uint ctz(ull x) { return __builtin_ctzll(x); }

	template <class T>
	T gcd(T a, T b) {  while (b) { T t = a % b; a = b; b = t; } return a; }

	template <class T, class dT, class sT>
	struct Mod {
		static T mod, inv, r2;
		static const int wb = sizeof(T) * 8;
  		T x;
  		Mod(): x(0) {}
		Mod(T _x): x(init(_x)) {}
  		bool operator == (const Mod& rhs) const { return x == rhs.x; }
  		bool operator != (const Mod& rhs) const { return x != rhs.x; }
  		Mod operator += (const Mod& rhs) { if ((x += rhs.x) >= mod) x -= mod; return *this; }
  		Mod operator -= (const Mod& rhs) { if (sT(x -= rhs.x) < 0) x += mod; return *this; }
  		Mod operator *= (const Mod& rhs) { x = reduce(dT(x) * rhs.x); return *this; }
  		Mod operator + (const Mod &rhs) const { return Mod(*this) += rhs; }
  		Mod operator - (const Mod &rhs) const { return Mod(*this) -= rhs; }
  		Mod operator * (const Mod &rhs) const { return Mod(*this) *= rhs; }
  		Mod operator - () const { return Mod() - *this; }
  		Mod pow(ull e) const {
    		Mod r(1); for (Mod a = *this; e; e >>= 1, a *= a) if (e & 1) r *= a;
    		return r;
  		}
  		T get() const { return reduce(x); }
  		static T modulus() { return mod; }
  		static T init(T w) { return reduce(dT(w) * r2); }
  		static void set_mod(T m) { mod = m, inv = mul_inv(mod), r2 = -dT(mod) % mod; }
  		static T reduce(dT x) {
    		T y = T(x >> wb) - T((dT(T(x) * inv) * mod) >> wb);
    		return sT(y) < 0 ? y + mod : y;
  		}
  		static T mul_inv(T n, int e = 6, T x = 1) {
    		return !e ? x : mul_inv(n, e - 1, x * (2 - x * n));
  		}	
	};

	using Mod64 = Mod<ull, uint128, ll>;
	using Mod32 = Mod<uint, ull, int>;
	template <> ull Mod64::mod = 0;
	template <> ull Mod64::inv = 0;
	template <> ull Mod64::r2 = 0;
	template <> uint Mod32::mod = 0;
	template <> uint Mod32::inv = 0;
	template <> uint Mod32::r2 = 0;

	template <class T, class mod>
	bool composite(T n, const uint* bases, int m) {
  		mod :: set_mod(n);
  		int s = __builtin_ctzll(n - 1);
  		T d = (n - 1) >> s;
  		mod one(1), fone(n - 1);
  		for (int i = 0, j; i < m; ++i) {
    		mod a = mod(bases[i]).pow(d);
    		if (a == one || a == fone) continue;
    		for (j = s - 1; j > 0; --j) {
      			if ((a *= a) == fone) break;
    		}
    		if (j == 0) return 1;
  		}
  		return 0;
	}

	bool is_prime(ull n) { // reference: http://miller-rabin.appspot.com
  		assert(n < (ull(1) << 63));
  		static const uint bases[][7] = {
    		{2, 3},
    		{2, 299417},
    		{2, 7, 61},
    		{15, 176006322, 4221622697u},
    		{2, 2570940, 211991001, 3749873356u},
    		{2, 2570940, 880937, 610386380, 4130785767u},
    		{2, 325, 9375, 28178, 450775, 9780504, 1795265022}
  		};
  		if (n <= 1) return 0;
  		if (!(n & 1)) return n == 2;
  		if (n <= 8) return 1;
  		int x = 6, y = 7;
  		if (n < 1373653) x = 0, y = 2;
  		else if (n < 19471033) x = 1, y = 2;
  		else if (n < 4759123141) x = 2, y = 3;
  		else if (n < 154639673381) x = y = 3;
  		else if (n < 47636622961201) x = y = 4;
  		else if (n < 3770579582154547) x = y = 5;
  		if (n < (1u << 31)) 
    		return !composite<uint, Mod32>(n, bases[x], y);
  		else 
    		return !composite<ull, Mod64>(n, bases[x], y);
	}

	struct ExactDiv {
  		ExactDiv() {}
  		ExactDiv(ull n) : n(n), i(Mod64::mul_inv(n)), t(ull(-1) / n) {}
  		friend ull operator / (ull n, ExactDiv d) { return n * d.i; };
  		bool divide(ull n) { return n / *this <= t; }
  		ull n, i, t;
	};

	vector<ExactDiv> primes;

	void init(uint n) {
  		uint sqrt_n = sqrt(n);
  		vector<bool> is_prime(n + 1, 1);
  		primes.clear();
  		for (uint i = 2; i <= sqrt_n; ++i) if (is_prime[i]) {
    		if (i != 2) primes.push_back(ExactDiv(i));
    		for (uint j = i * i; j <= n; j += i) is_prime[j] =  0;
  		}
	}

	template <class word, class mod>
	word brent(word n, word c) { // n must be composite and odd.
  		const ull s = 256;
  		mod::set_mod(n);
  		const mod one = mod(1), mc = mod(c);
  		mod y = one;
  		for (ull l = 1; ; l <<= 1) {
    		auto x = y;
    		for (int i = 0; i < (int)l; ++i) y = y * y + mc;
    		mod p = one;
    		for (int k = 0; k < (int)l; k += s) {
      			auto sy = y;
      			for (int i = 0; i < (int)std::min(s, l - k); ++i) {
        			y = y * y + mc;
        			p *= y - x;
      			}
      			word g = gcd(n, p.x);
      			if (g == 1) continue;
      			if (g == n) for (g = 1, y = sy; g == 1; ) {
        		y = y * y + mc, g = gcd(n, (y - x).x);
      			}
      			return g;
    		}
  		}
	}

	ull brent(ull n, ull c) {
  		if (n < (uint(1) << 31)) {
   			return brent<uint, Mod32>(n, c);
  		} else if (n < (ull(1) << 63)) {
    		return brent<ull, Mod64>(n, c);
  		}
  		return 0;
	}

	vector<pii> factors(ull n) {
  		assert(n < (ull(1) << 63));
  		if (n <= 1) return {};
  		vector<pii> ret;
  		ull v2 = sqrtl(n), v3 = cbrtl(n);
  		if (v2 * v2 == n || v3 * v3 * v3 == n) {
  			v2 = v2 * v2 == n ? 2 : 3;
    		ret = factors(v);
    		for (auto &&e: ret) e.second *= v2;
    		return ret;
  		}
/*  	v = cbrtl(n);
  	if (ull(v) * v * v == n) {
   		ret = factors(v);
    	for (auto &&e: ret) e.second *= 3;
   		return ret;
  	}*/
  	if (!(n & 1)) {
    	uint e = __builtin_ctzll(n);
    	ret.emplace_back(2, e);
    	n >>= e;
 	}
  	ull lim = sqr(primes.back().n);
  	for (auto &&p: primes) {
    	if (sqr(p.n) > n) break;
    	if (p.divide(n)) {
      		uint e = 1; n = n / p;
      		while (p.divide(n)) n = n / p, e++;
      		ret.emplace_back(p.n, e);
    	}
  	}
  	uint s = ret.size();
  	while (n > lim && !is_prime(n)) {
    	for (ull c = 1; ; ++c) {
      		ull p = brent(n, c);
      		if (!is_prime(p)) continue;
      		uint e = 1; n /= p;
      		while (n % p == 0) n /= p, e += 1;
      		ret.emplace_back(p, e);
      		break;
    	}
  	}
  	if (n > 1) ret.emplace_back(n, 1);
  	if (ret.size() - s >= 2) sort(ret.begin() + s, ret.end());
  	return ret;
	}
}

int main() {
	srand((unsigned)time(NULL));
	freopen("a.in", "r",stdin);
	//freopen("a.out", "w", stdout);
	int t;
	cin>>t;
	prime :: init(100000);
	while(t--) {
		ll n;
        cin >> n; 
        vector<prime :: pii> ans = prime :: factors(n);
        unsigned long long an = 0;
        for (auto u : ans) an = max(an, u.fi);
        cout << an << endl;
	}
}